<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <link rel="preconnect" href="https://fonts.gstatic.com">
    <link rel="icon" href="/images/system/widespread_logo_1a1a1a.ico" />
    <link href="https://fonts.googleapis.com/css2?family=Gruppo&family=Roboto:ital,wght@0,100;0,400;0,500;0,700;1,100&display=swap" rel="stylesheet">
    <script src="https://kit.fontawesome.com/080e00a6ec.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/style/main.css">
    <script>
        const ROOM_ID = "<%= roomId %>"
        const USER_ID = "<%= user.id %>"
    </script>
    <script defer src="https://unpkg.com/peerjs@1.3.2/dist/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <!-- <script src="/logic/video-chat.js" defer></script> -->
    <title>SpreadChat Video</title>
    <style>

body {
    overflow: hidden;
}
.spread-chat-container {
    position: fixed;
    height: 100vh;
    width: 100vw;
    overflow: hidden;
    top: 0;
    left: 0;
    z-index: 99995;
}


.entry-modal{
    width: 300px;
    margin: auto;
    z-index: 9999;
    position: absolute;
    left: 50%;
    top: 170px;
    margin-left: -150px;
    padding: 5px;
    color: #fff;
    text-align: center;
}

#notification{
    position: fixed;
    z-index: 99996;
    text-align: center;
    color: #fff;
    margin: 0;
    top: 80px;
    font-size: 18pt;
    width: 100%;
    background-color: orange;
}


.room-input{
  border: none;
  padding:5px;
}

.chat-buttons {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}
 .chat-buttons button{
    background-color: rgba(0, 255, 0, 0.75);
    border-radius: 8px;
    padding: 12px;
    color: #fff;
    font-size: 2rem;
    
    border: none;
    box-shadow: 0 0 10px #fff, inset 0 0 20px rgba(255, 255, 255, 0.5);
    backdrop-filter: blur(4px);
    display: block;
    margin-bottom: 30px;
    text-align: center;
}

#remote-video{
 top: 0;
    width: 100vw;
    object-fit: cover;
    height: 100vh;
    z-index: 1;
    right: 0;
    left: 0;
    position: fixed;
}
.meet-controls-bar{
    bottom: 0;
    background-color: black;
    left: 0;
    position: absolute;
    width: 100%;
}
        .video-container {
            position: fixed;
            width: 100vw;
            height: 100vh;
            top: 0;
            left: 0;
            right: 0;
            z-index: 4000;
            bottom: 0;

}
#remote-video video {
    width: 100%;
    height: 100%;
}
#local-video{
        bottom: 110px;
    border-radius: 8px;
    height: 150px;
    width: 100px;
    min-height: 150px;
    min-width: 100px;
    right: 20px;
    background-color: lightgray;
    position: fixed;
    z-index: 2;
   

        }
        #video-grid {
            width: 100vw;
            height: 100vh;
            min-width: 100vw;
            min-height: 100vh;
            position: relative;
        }

        video {
            position: relative;
            z-index: -20;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .mini-player {
            position: absolute;
            z-index: 20;
            width: 150px;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.6);
            top: 100px;
            right: 20px;
            
        }
        #leaveCallBtn {
            background-color: rgba(255, 0, 0, 0.25);
            backdrop-filter: blur(4px);
            color: #fff;
            text-shadow: 0 0 3px #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.6);
            position: fixed;
            bottom: 20px;
            left: 0;
            width: 100%;
            z-index: 99996;
            text-align: center;
            font-size: 2rem;
            padding-top: 20px;
            padding-bottom: 20px;
            border-top: outset 1px #fff;
            border-bottom: outset 1px #fff;
        }
        #leaveCallBtn a {
            color: #fff;
            font-weight: bold;
            text-decoration: none;
        }
        .peerData {
            position: fixed;
            top: 100px;
            left: 0;
            width: 100%;
            background-color: blue;
            color: #fff;
            font-size: 1.2rem;
            z-index: 30000;
        }
        .hidden {
            display: none;
        }
    </style>
</head>

<body>
    <%- include('./partials/layout/core-menu'); %>
    <p id="roomId" data-room-id="<%= spreadChatSession %>" class="hidden"></p>
    <p id="notification" hidden></p>
    <div class="spread-chat-container">

        <div class="entry-modal" id="entry-modal">
            <input id="room-input" class="room-input hidden" value="<%= spreadChatSession %>" placeholder="Enter Room ID">
            <div class="chat-buttons">
                <button onclick="createRoom()">Start Call</button>
                <button onclick="joinRoom()" class="hidden">Join Call</button>
            </div>
            <p id="currentUserId" data-current-user-id="<%= user.id %>" style="color: lime; display: none;"><%= user.id %></p>
            <div id="userListIds">
                <% spreadChat.user_list.forEach(function(listUser) { %>
                    <p data-user-id="<%= listUser.id %>" data-user-name="<%= listUser.fname %>" style="display: none; color: #fff;"><%= listUser.id %></p>
                <% }) %>
            </div>
        </div>
    </div>
    <div class="meet-area">
        <!-- Remote Video Element-->
        <video id="remote-video"></video>
    
        <!-- Local Video Element-->
        <video id="local-video"></video>
        <div class="meet-controls-bar hidden">
            <button onclick="startScreenShare()">Screen Share</button>
        </div>
    </div>


    <div id="leaveCallBtn">
        <p><a href="/users/dashboard">End Call</a></p>
    </div>




    <!-- PEER SCRIPT -->

    <script>

            const roomIdEl = document.getElementById('roomId')
            const roomId = roomIdEl.getAttribute('data-room-id')
            var room_id;
            var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            var local_stream;
            var screenStream;
            var peer = null;
            var currentPeer = null
            var screenSharing = false
            function createRoom() {
                console.log("Creating Room")
                let room = document.getElementById("room-input").value;
                if (room == " " || room == "") {
                    alert("Please enter room number")
                    return;
                }
                room_id = roomId;

                peer = new Peer(room_id)
                console.log(peer.id)
                peer.on('open', (id) => {
                    console.log("Peer Connected with ID: ", id)
                    hideModal()
                    navigator.getUserMedia({ video: true, audio: true }, (stream) => {
                        local_stream = stream;
                        setLocalStream(local_stream)
                    }, (err) => {
                        console.log(err)
                    })


                    const currentUserIdEl = document.getElementById('currentUserId')
                    const currentUserId = currentUserIdEl.getAttribute('data-current-user-id')

                    const userListIdEl = document.getElementById('userListIds')
                    const userListIdEls = userListIdEl.querySelectorAll('p')
                    userListIdEls.forEach(userListEl => {
                        const userListID = userListEl.getAttribute('data-user-id')
                        console.log('Each User: ', userListID)

                        if (currentUserId != userListID) {
                            const waitingOn = userListEl.getAttribute('data-user-name')
                            notify(`Waiting for ${waitingOn} to join.`)
                        }
                    })
                    
                })
                peer.on('call', (call) => {
                    call.answer(local_stream);
                    call.on('stream', (stream) => {
                        setRemoteStream(stream)
                    })
                    currentPeer = call;
                })
            }

            function setLocalStream(stream) {

                let video = document.getElementById("local-video");
                video.srcObject = stream;
                video.muted = true;
                video.play();
            }
            function setRemoteStream(stream) {

                let video = document.getElementById("remote-video");
                video.srcObject = stream;
                video.play();
            }

            function hideModal() {
                document.getElementById("entry-modal").hidden = true
            }

            function notify(msg) {
                let notification = document.getElementById("notification")
                notification.innerHTML = msg
                notification.hidden = false
                setTimeout(() => {
                    notification.hidden = true;
                }, 5000)
            }

            function joinRoom() {
                console.log("Joining Room")
                let room = document.getElementById("room-input").value;
                if (room == " " || room == "") {
                    alert("Please enter room number")
                    return;
                }
                room_id = roomId;
                hideModal()
                peer = new Peer()
                console.log(peer)
                peer.on('open', (id) => {
                    console.log("Connected with Id: " + id)
                    navigator.getUserMedia({ video: true, audio: true }, (stream) => {
                        local_stream = stream;
                        setLocalStream(local_stream)
                        const currentUserIdEl = document.getElementById('currentUserId')
                        const currentUserId = currentUserIdEl.getAttribute('data-current-user-id')

                        const userListIdEl = document.getElementById('userListIds')
                        const userListIdEls = userListIdEl.querySelectorAll('p')
                        userListIdEls.forEach(userListEl => {
                            const userListID = userListEl.getAttribute('data-user-id')
                            console.log('Each User: ', userListID)

                            if (currentUserId != userListID) {
                                const waitingOn = userListEl.getAttribute('data-user-name')
                                notify(`Joining ${waitingOn}`)
                            }
                        })
                        let call = peer.call(room_id, stream)
                        call.on('stream', (stream) => {
                            setRemoteStream(stream);
                        })
                        currentPeer = call;
                    }, (err) => {
                        console.log(err)
                    })

                })
            }

            function startScreenShare() {
                if (screenSharing) {
                    stopScreenSharing()
                }
                navigator.mediaDevices.getDisplayMedia({ video: true }).then((stream) => {
                    screenStream = stream;
                    let videoTrack = screenStream.getVideoTracks()[0];
                    videoTrack.onended = () => {
                        stopScreenSharing()
                    }
                    if (peer) {
                        let sender = currentPeer.peerConnection.getSenders().find(function (s) {
                            return s.track.kind == videoTrack.kind;
                        })
                        sender.replaceTrack(videoTrack)
                        screenSharing = true
                    }
                    console.log(screenStream)
                })
            }

            function stopScreenSharing() {
                if (!screenSharing) return;
                let videoTrack = local_stream.getVideoTracks()[0];
                if (peer) {
                    let sender = currentPeer.peerConnection.getSenders().find(function (s) {
                        return s.track.kind == videoTrack.kind;
                    })
                    sender.replaceTrack(videoTrack)
                }
                screenStream.getTracks().forEach(function (track) {
                    track.stop();
                });
                screenSharing = false
            }
    </script>
    </body>

</html>