<<<<<<< HEAD
<style>

    body, #coreContainer, #passengerTabletContainer {
        overflow: hidden;
    }
    #coreContainer {
        min-height: 50vh;
    }
    #dataFromMainDash {
        position: fixed;
        top: 50px;
        left: 0;
        width: 100vw;
        height: calc(100vh - 50px);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .page-header {
        padding: 10px;
    }
    .page-header h1 {
        text-align: center;
        font-size: 2.5rem;
        color: lightskyblue;
    }
    #dataFromMainDash video {
        width: 100%;
        aspect-ratio: 16 / 9;
        box-shadow: 0 0 50px #000;
        background-color: #000;
    }

.video-container {
    max-width: 100vw;
    width: 90vw;
    max-height: 100vh;
    margin-inline: auto;
    margin-bottom: 30px;
    margin-top: 20px;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 0 10px lightskyblue;
    position: relative;
    z-index: 20;
    background-color: #000;
    display: flex;
    align-items: center;
    justify-content: center;
}
.video-container:fullscreen {
    border-radius: 0;
    min-width: 100vw;
    width: 100vw;
}
.video-container video {
    max-width: 100vw;
    max-height: 90vh;
    width: 90vw;
    min-width: 90vw;
    aspect-ratio: 16 / 9;
}
.video-container:fullscreen video {
    min-width: 100vw;
    width: 100vw;
    aspect-ratio: 16 / 9;
}
.video-controls {
    position: absolute;
    left: 0;
    bottom: 0;
    right: 0;
    opacity: 0;
    transition: opacity 500ms ease-in-out;
    z-index: 25;
    backdrop-filter: blur(10px);
    background-color: rgba(0, 0, 0, 0.5);
    padding-top: 5px;
    border-top: solid 2px rgba(85, 85, 85, 0.5);
    box-shadow: 0 -3px 5px rgba(0, 0, 0, 0.4);
}
.video-container:hover .video-controls, .video-container.paused .video-controls {
    opacity: 1;
}
.controls {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: space-between;
}
.video-controls button {
    background: none;
    outline: none;
    border: none;
    text-shadow: 0 0 2px #fff;
    display: block;
    
}
.video-controls button i {
    font-size: 2rem;
    color: rgba(135, 206, 250, 0.5);
}
.video-container.paused #pauseBtn {
    display: none;
}
.video-container:not(.paused) #playBtn {
    display: none;
}
.video-container.fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 99999;
    width: 100%;
    height: 100vh;

}

.video-container.fullscreen #fullscreenBtn {
    display: none;
}


.video-container:not(.fullscreen) #exitFullscreenBtn {
    display: none;
}

.duration-container {
    display: flex;
    align-items: center;
    gap: .25rem;
    flex-grow: 1;
    color: #fff;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
}

.timeline-container {
  height: 7px;
  margin-inline: .5rem;
  cursor: pointer;
  display: flex;
  align-items: center;
}

.timeline {
  background-color: rgba(100, 100, 100, .5);
  height: 3px;
  width: 100%;
  position: relative
}

.timeline::before {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  right: calc(100% - var(--preview-position) * 100%);
  background-color: rgba(255, 255, 255, 0.5);
  display: none;
}

.timeline::after {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  right: calc(100% - var(--progress-position) * 100%);
  background-color: lightskyblue;
}

.timeline .thumb-indicator {
  --scale: 0;
  position: absolute;
  transform: translateX(-50%) scale(var(--scale));
  height: 200%;
  top: -50%;
  left: calc(var(--progress-position) * 100%);
  background-color: #fff;
  z-index: 99999;
  border-radius: 50%;
  transition: transform 150ms ease-in-out;
  aspect-ratio: 1 / 1;
}
.video-container.scrubbing .thumbnail-img {
  display: block;
}

.video-container.scrubbing .preview-img,
.timeline-container:hover .preview-img {
  display: block;
}

.video-container.scrubbing .timeline::before,
.timeline-container:hover .timeline::before {
  display: block;
}

.video-container.scrubbing .thumb-indicator,
.timeline-container:hover .thumb-indicator {
  --scale: 1;
}

.video-container.scrubbing .timeline,
.timeline-container:hover .timeline {
  height: 100%;
}

.timeline-container:hover .timeline::before {
    display: block;
}

.timeline-container:hover .thumb-indicator {
    --scale: 1
}

.timeline-container:hover .timeline {
    height: 100%;
}

.hidden {
    display: none;
}
</style>

<div class="page-header">
    <h1 id="videoTitle"></h1>
</div>


<div id="passengerTabletContainer">
    <div id="dataFromMainDash">

        <div class="video-container paused">
            <div class="video-controls">
                <div class="timeline-container">
                    <div class="timeline">

                        <div class="thumb-indicator"></div>
                    </div>
                </div>
                <div class="controls">
                    <button class="play-pause-button">
                        <i id="playBtn" class="bx bx-play"></i>
                        <i id="pauseBtn" class="bx bx-pause"></i>
                    </button>

                    <button style="display: none;">
                        <i id="volumeBtn" class="bx bx-volume-full"></i>
                    </button>
                    <button style="display: none;">
                        <i id="muteBtn" class="bx bx-volume-mute"></i>
                    </button>
                    <button style="display: none;">

                        <i id="playbackSettingsBtn" class="bx bx-cog"></i>
                    </button>
                    <div class="duration-container">
                        <div class="current-time">00:00</div>
                        <div class="total-time"></div>
                    </div>

                    <button>
                        <i id="fullscreenBtn" class="bx bx-fullscreen"></i>
                        <i id="exitFullscreenBtn" class="bx bx-exit-fullscreen"></i>
                    </button>
                </div>
            </div>

            <video id="passengerMainVideo" autoplay src=""></video>
        </div>
    </div>
</div>


<script>
    const mainDashData = document.getElementById('mainDashData')
    const passengerMainVideo = document.getElementById('passengerMainVideo')
    const videoTitle = document.getElementById('videoTitle')
    const passengerBroadcast = new BroadcastChannel('passengerBroadcast')

    passengerBroadcast.addEventListener('message', e => {
        passengerMainVideo.src = e.data.videoData
        videoTitle.innerText = e.data.title
    })



    const videoContainer = document.querySelector('.video-container')
    const videoControls = document.querySelector('.video-controls')
    const video = document.querySelector('video')
    const currentTimeEl = document.querySelector('.current-time')
    const totalTimeEl = document.querySelector('.total-time')
    const timelineContainer = document.querySelector('.timeline-container')

    const playPauseBtn = document.querySelector('.play-pause-button')
    const fullscreenBtn = document.getElementById('fullscreenBtn')
    const exitFullscreenBtn = document.getElementById('exitFullscreenBtn')

    // Timeline
    videoContainer.addEventListener('click', e => {
            videoControls.classList.toggle('active')
            if (e.target ) {
                checkActive()
            }
    })
    function checkActive() {
        if (videoControls.classList.contains('active')) {
            videoControls.classList.toggle('hidden')
            videoControls.classList.toggle('active')
        }
    }
    timelineContainer.addEventListener("mousemove", handleTimelineUpdate)
    timelineContainer.addEventListener("mousedown", toggleScrubbing)
    document.addEventListener("mouseup", e => {
        if (isScrubbing) toggleScrubbing(e)
    })
    document.addEventListener("mousemove", e => {
        if (isScrubbing) handleTimelineUpdate(e)
    })

    let isScrubbing = false
    let wasPaused
    function toggleScrubbing(e) {
        const rect = timelineContainer.getBoundingClientRect()
        const percent = Math.min(Math.max(0, e.x - rect.x), rect.width) / rect.width
        isScrubbing = (e.buttons & 1) === 1
        videoContainer.classList.toggle("scrubbing", isScrubbing)
        if (isScrubbing) {
            wasPaused = video.paused
            video.pause()
        } else {
            video.currentTime = percent * video.duration
            if (!wasPaused) video.play()
        }

        handleTimelineUpdate(e)
    }

    function handleTimelineUpdate(e) {
        const rect = timelineContainer.getBoundingClientRect()
        const percent = Math.min(Math.max(0, e.x - rect.x), rect.width) / rect.width
        const previewImgNumber = Math.max(
            1,
            Math.floor((percent * video.duration) / 10)
        )
        timelineContainer.style.setProperty("--preview-position", percent)

        if (isScrubbing) {
            e.preventDefault()
            timelineContainer.style.setProperty("--progress-position", percent)
        }
    }

        playPauseBtn.addEventListener('click', playToggle)

        function playToggle() {
            video.paused ? video.play() : video.pause()
        }
        
        video.addEventListener('play', () => {
            videoContainer.classList.remove('paused')
        })

        video.addEventListener('pause', () => {
            videoContainer.classList.add('paused')
        })

        fullscreenBtn.addEventListener('click', toggleFullscreenMode)
        exitFullscreenBtn.addEventListener('click', toggleFullscreenMode)
        function toggleFullscreenMode() {
            if (document.fullscreenElement == null) {
                videoContainer.requestFullscreen()
            } else {
                document.exitFullscreen()
            }
        }

        document.addEventListener('fullscreenchange', () => {
            videoContainer.classList.toggle('fullscreen')
        })


        video.addEventListener('loadeddata', () => {
            totalTimeEl.textContent = formatDuration(video.duration)
        })

        video.addEventListener('timeupdate', () => {
            currentTimeEl.textContent = formatDuration(video.currentTime)
            const percent = video.currentTime / video.duration
            timelineContainer.style.setProperty('--progress-position', percent)
        })

        const leadingZeroFormatter = new Intl.NumberFormat(undefined, {
            minimumIntegerDigits: 2
        })
        function formatDuration(time) {
            const seconds = Math.floor(time % 60)
            const minutes = Math.floor(time / 60) % 60
            const hours = Math.floor(time / 3600)
            if (hours === 0) {
                return `${leadingZeroFormatter.format(minutes)}:${leadingZeroFormatter.format(seconds)}`
            } else {
                return `${leadingZeroFormatter.format(hours)}:${leadingZeroFormatter.format(minutes)}:${leadingZeroFormatter.format(seconds)}`

            }
            
        }

=======
<style>

    body, #coreContainer, #passengerTabletContainer {
        overflow: hidden;
    }
    #coreContainer {
        min-height: 50vh;
    }
    #dataFromMainDash {
        position: fixed;
        top: 50px;
        left: 0;
        width: 100vw;
        height: calc(100vh - 50px);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .page-header {
        padding: 10px;
    }
    .page-header h1 {
        text-align: center;
        font-size: 2.5rem;
        color: lightskyblue;
    }
    #dataFromMainDash video {
        width: 100%;
        aspect-ratio: 16 / 9;
        box-shadow: 0 0 50px #000;
        background-color: #000;
    }

.video-container {
    max-width: 100vw;
    width: 90vw;
    max-height: 100vh;
    margin-inline: auto;
    margin-bottom: 30px;
    margin-top: 20px;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 0 10px lightskyblue;
    position: relative;
    z-index: 20;
    background-color: #000;
    display: flex;
    align-items: center;
    justify-content: center;
}
.video-container:fullscreen {
    border-radius: 0;
    min-width: 100vw;
    width: 100vw;
}
.video-container video {
    max-width: 100vw;
    max-height: 90vh;
    width: 90vw;
    min-width: 90vw;
    aspect-ratio: 16 / 9;
}
.video-container:fullscreen video {
    min-width: 100vw;
    width: 100vw;
    aspect-ratio: 16 / 9;
}
.video-controls {
    position: absolute;
    left: 0;
    bottom: 0;
    right: 0;
    opacity: 0;
    transition: opacity 500ms ease-in-out;
    z-index: 25;
    backdrop-filter: blur(10px);
    background-color: rgba(0, 0, 0, 0.5);
    padding-top: 5px;
    border-top: solid 2px rgba(85, 85, 85, 0.5);
    box-shadow: 0 -3px 5px rgba(0, 0, 0, 0.4);
}
.video-container:hover .video-controls, .video-container.paused .video-controls {
    opacity: 1;
}
.controls {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: space-between;
}
.video-controls button {
    background: none;
    outline: none;
    border: none;
    text-shadow: 0 0 2px #fff;
    display: block;
    
}
.video-controls button i {
    font-size: 2rem;
    color: rgba(135, 206, 250, 0.5);
}
.video-container.paused #pauseBtn {
    display: none;
}
.video-container:not(.paused) #playBtn {
    display: none;
}
.video-container.fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 99999;
    width: 100%;
    height: 100vh;

}

.video-container.fullscreen #fullscreenBtn {
    display: none;
}


.video-container:not(.fullscreen) #exitFullscreenBtn {
    display: none;
}

.duration-container {
    display: flex;
    align-items: center;
    gap: .25rem;
    flex-grow: 1;
    color: #fff;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
}

.timeline-container {
  height: 7px;
  margin-inline: .5rem;
  cursor: pointer;
  display: flex;
  align-items: center;
}

.timeline {
  background-color: rgba(100, 100, 100, .5);
  height: 3px;
  width: 100%;
  position: relative
}

.timeline::before {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  right: calc(100% - var(--preview-position) * 100%);
  background-color: rgba(255, 255, 255, 0.5);
  display: none;
}

.timeline::after {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  right: calc(100% - var(--progress-position) * 100%);
  background-color: lightskyblue;
}

.timeline .thumb-indicator {
  --scale: 0;
  position: absolute;
  transform: translateX(-50%) scale(var(--scale));
  height: 200%;
  top: -50%;
  left: calc(var(--progress-position) * 100%);
  background-color: #fff;
  z-index: 99999;
  border-radius: 50%;
  transition: transform 150ms ease-in-out;
  aspect-ratio: 1 / 1;
}
.video-container.scrubbing .thumbnail-img {
  display: block;
}

.video-container.scrubbing .preview-img,
.timeline-container:hover .preview-img {
  display: block;
}

.video-container.scrubbing .timeline::before,
.timeline-container:hover .timeline::before {
  display: block;
}

.video-container.scrubbing .thumb-indicator,
.timeline-container:hover .thumb-indicator {
  --scale: 1;
}

.video-container.scrubbing .timeline,
.timeline-container:hover .timeline {
  height: 100%;
}

.timeline-container:hover .timeline::before {
    display: block;
}

.timeline-container:hover .thumb-indicator {
    --scale: 1
}

.timeline-container:hover .timeline {
    height: 100%;
}

.hidden {
    display: none;
}
</style>

<div class="page-header">
    <h1 id="videoTitle"></h1>
</div>


<div id="passengerTabletContainer">
    <div id="dataFromMainDash">

        <div class="video-container paused">
            <div class="video-controls">
                <div class="timeline-container">
                    <div class="timeline">

                        <div class="thumb-indicator"></div>
                    </div>
                </div>
                <div class="controls">
                    <button class="play-pause-button">
                        <i id="playBtn" class="bx bx-play"></i>
                        <i id="pauseBtn" class="bx bx-pause"></i>
                    </button>

                    <button style="display: none;">
                        <i id="volumeBtn" class="bx bx-volume-full"></i>
                    </button>
                    <button style="display: none;">
                        <i id="muteBtn" class="bx bx-volume-mute"></i>
                    </button>
                    <button style="display: none;">

                        <i id="playbackSettingsBtn" class="bx bx-cog"></i>
                    </button>
                    <div class="duration-container">
                        <div class="current-time">00:00</div>
                        <div class="total-time"></div>
                    </div>

                    <button>
                        <i id="fullscreenBtn" class="bx bx-fullscreen"></i>
                        <i id="exitFullscreenBtn" class="bx bx-exit-fullscreen"></i>
                    </button>
                </div>
            </div>

            <video id="passengerMainVideo" autoplay src=""></video>
        </div>
    </div>
</div>


<script>
    const mainDashData = document.getElementById('mainDashData')
    const passengerMainVideo = document.getElementById('passengerMainVideo')
    const videoTitle = document.getElementById('videoTitle')
    const passengerBroadcast = new BroadcastChannel('passengerBroadcast')

    passengerBroadcast.addEventListener('message', e => {
        passengerMainVideo.src = e.data.videoData
        videoTitle.innerText = e.data.title
    })



    const videoContainer = document.querySelector('.video-container')
    const videoControls = document.querySelector('.video-controls')
    const video = document.querySelector('video')
    const currentTimeEl = document.querySelector('.current-time')
    const totalTimeEl = document.querySelector('.total-time')
    const timelineContainer = document.querySelector('.timeline-container')

    const playPauseBtn = document.querySelector('.play-pause-button')
    const fullscreenBtn = document.getElementById('fullscreenBtn')
    const exitFullscreenBtn = document.getElementById('exitFullscreenBtn')

    // Timeline
    videoContainer.addEventListener('click', e => {
            videoControls.classList.toggle('active')
            if (e.target ) {
                checkActive()
            }
    })
    function checkActive() {
        if (videoControls.classList.contains('active')) {
            videoControls.classList.toggle('hidden')
            videoControls.classList.toggle('active')
        }
    }
    timelineContainer.addEventListener("mousemove", handleTimelineUpdate)
    timelineContainer.addEventListener("mousedown", toggleScrubbing)
    document.addEventListener("mouseup", e => {
        if (isScrubbing) toggleScrubbing(e)
    })
    document.addEventListener("mousemove", e => {
        if (isScrubbing) handleTimelineUpdate(e)
    })

    let isScrubbing = false
    let wasPaused
    function toggleScrubbing(e) {
        const rect = timelineContainer.getBoundingClientRect()
        const percent = Math.min(Math.max(0, e.x - rect.x), rect.width) / rect.width
        isScrubbing = (e.buttons & 1) === 1
        videoContainer.classList.toggle("scrubbing", isScrubbing)
        if (isScrubbing) {
            wasPaused = video.paused
            video.pause()
        } else {
            video.currentTime = percent * video.duration
            if (!wasPaused) video.play()
        }

        handleTimelineUpdate(e)
    }

    function handleTimelineUpdate(e) {
        const rect = timelineContainer.getBoundingClientRect()
        const percent = Math.min(Math.max(0, e.x - rect.x), rect.width) / rect.width
        const previewImgNumber = Math.max(
            1,
            Math.floor((percent * video.duration) / 10)
        )
        timelineContainer.style.setProperty("--preview-position", percent)

        if (isScrubbing) {
            e.preventDefault()
            timelineContainer.style.setProperty("--progress-position", percent)
        }
    }

        playPauseBtn.addEventListener('click', playToggle)

        function playToggle() {
            video.paused ? video.play() : video.pause()
        }
        
        video.addEventListener('play', () => {
            videoContainer.classList.remove('paused')
        })

        video.addEventListener('pause', () => {
            videoContainer.classList.add('paused')
        })

        fullscreenBtn.addEventListener('click', toggleFullscreenMode)
        exitFullscreenBtn.addEventListener('click', toggleFullscreenMode)
        function toggleFullscreenMode() {
            if (document.fullscreenElement == null) {
                videoContainer.requestFullscreen()
            } else {
                document.exitFullscreen()
            }
        }

        document.addEventListener('fullscreenchange', () => {
            videoContainer.classList.toggle('fullscreen')
        })


        video.addEventListener('loadeddata', () => {
            totalTimeEl.textContent = formatDuration(video.duration)
        })

        video.addEventListener('timeupdate', () => {
            currentTimeEl.textContent = formatDuration(video.currentTime)
            const percent = video.currentTime / video.duration
            timelineContainer.style.setProperty('--progress-position', percent)
        })

        const leadingZeroFormatter = new Intl.NumberFormat(undefined, {
            minimumIntegerDigits: 2
        })
        function formatDuration(time) {
            const seconds = Math.floor(time % 60)
            const minutes = Math.floor(time / 60) % 60
            const hours = Math.floor(time / 3600)
            if (hours === 0) {
                return `${leadingZeroFormatter.format(minutes)}:${leadingZeroFormatter.format(seconds)}`
            } else {
                return `${leadingZeroFormatter.format(hours)}:${leadingZeroFormatter.format(minutes)}:${leadingZeroFormatter.format(seconds)}`

            }
            
        }

>>>>>>> a8a8b4650a974eeda356f271e4e38c9b4cab5fa3
</script>